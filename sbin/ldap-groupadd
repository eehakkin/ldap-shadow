#! /bin/sh -Cefu
###########################################################################
# ldap-groupadd 1.0
#
# Copyright (C) 2012 - 2022 Eero Häkkinen <Eero+ldap-shadow@Häkkinen.fi>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################
me=$( command -v -- "${0}" || exec ls -d -- "${0}" )
dir=$( exec dirname -- "${me}" )
base=$( exec basename -- "${me}" )
wrapper=${dir}/../bin/${base%-*}-passwd
case ${1-} in
--help=man        ) exec "${0}" --help=troff | exec man -l -- -; exit ;;
--help=troff      ) exec help2man \
	-L 'C.UTF-8' \
	-N \
	-n 'create a new LDAP POSIX group' \
	-s 8 \
	-- "${0}" ;;
--help=* | --help ) exec cat << __USAGE__ ;;
Usage: ${0##*[\\/]} [OPTION]... GROUP

Add a new LDAP POSIX group to an LDAP server using administrative privileges.

Options:
 -f, --force            Exit successfully if the group already exists and
                        cancel -g if the group ID is already used.
 -g, --gid GID          Use the group ID for the new group.
 -h, --help[=FORMAT]    Show this help message and exit.
 -K, --key KEY=VALUE    Override a default configuration.
 -o, --non-unique       (ignored)
 -R, --root CHROOT_DIR  (ignored)
 -r, --system           Create a system group.
 -V, --version          Show version information and exit.
     --dry-run          Dump LDIF and exit.

Operands:
 GROUP             The name (the common name defined by cn attribute) of
                   the LDAP POSIX group which is to be created using
                   administrative privileges.

Configuration variables:
 GID_MIN           A minimum group ID for new groups.
 GID_MAX           A maximum group ID for new groups.
 SYS_GID_MIN       A minimum group ID for new system groups.
 SYS_GID_MAX       A maximum group ID for new system groups.
 GROUP_BASE_DN     A distinguished name (DN) of an LDAP entry to be used as
                   a search base for POSIX groups. This one takes precedence
                   over the GROUP_BASE_RDN variable.
                   The default is to search for an organizationalUnit LDAP
                   entry containing posixGroup LDAP entries.
 GROUP_BASE_RDN    A relative distinguished name (RDN) of an LDAP entry to be
                   used as a search base for POSIX groups. The GROUP_BASE_DN
                   variable takes precedence over this one.
 GROUP_OU_RDN      A relative distinguished name (RDN) of an organization unit
                   LDAP subentry under the POSIX group search base. A new POSIX
                   group will be created under this subentry.
                   If the group name contains dashes, the default is to use
                   ou=PREFIX where PREFIX is the group name without the last
                   dash separated part.
                   If the group name does not contains dashes, the default is
                   to use ou=GROUP if that LDAP subentry exists.

Environment:
 LDAPBINDDN        A distinguished name (DN) to be used for binding to an LDAP
                   server. The default is to search for a distinguished name
                   (DN) based on the current real username.
 LDAPBINDPW        A password for the distinguished name (DN) to be used for
                   binding to an LDAP server. The default is to prompt for
                   a password.
 LDAPCONF          A system LDAP configuration file.
 LDAPRC            A user LDAP configuration file.
 LDAPURI           An URI of an LDAP server or a list of URIs of LDAP servers.
 LDAPDEFAULT_OPTS  Default options for ldapmodify(1), ldapsearch(1) and
                   ldapwhoami(1).
 LDAPMODIFY_OPTS   Options for ldapmodify(1).
 LDAPSEARCH_OPTS   Options for ldapsearch(1).
 LDAPWHOAMI_OPTS   Options for ldapwhoami(1).
 LOGNAME           A username.
 SUDO_USER         A real username.
 USER              A fallback username.

Files:
 /etc/${base%-*}-login.defs      LDAP shadow suite configuration.
 ${dir%[\\/]*}/etc/${base%-*}-login.defs  LDAP shadow suite configuration.
 /etc/ldap/ldap.conf      LDAP configuration. See also ldap.conf(5).

__USAGE__
--mode=*  ) exec "${wrapper}" "${@}" ;;
--version ) unset LDAP_HAS_FRONTEND ;;
esac
${LDAP_HAS_FRONTEND:+:} exec "${wrapper}" --mode=frontend "${0}" "${@}"

###########################################################################
#
# Defaults.
#
###########################################################################
export GROUP GROUP_DN GROUP_DN_SPEC
GID_MIN=${GID_MIN:-10000} SYS_GID_MIN=${SYS_GID_MIN:-50000}
GID_MAX=${GID_MAX:-60000} SYS_GID_MAX=${SYS_GID_MAX:-60000}
FORCE= NORMAL=+ SYSTEM=
unset GROUP_GID

###########################################################################
#
# Options.
#
###########################################################################
while getopts fg:hK:oR:rV-: OPT "${@}"
do
	case -${OPT}${OPTARG-} in
	--gid | --key | --root )
		OPT=${OPT}${OPTARG}
		eval 'OPTARG=${'"${OPTIND}"'?}'
		OPTIND=$(( ${OPTIND} + 1 ))
		;;
	--*=* ) OPT=${OPT}${OPTARG%%=*} OPTARG=${OPTARG#*=} ;;
	--*   ) OPT=${OPT}${OPTARG%%=*}; unset OPTARG ;;
	esac
	case -${OPT}${OPTARG+=} in
	--force      | -f* ) FORCE=+ ;;
	--gid=       | -g* ) GROUP_GID=${OPTARG} ;;
	--help       | -h* | \
	--help=      ) exec "${0}" --help"${OPTARG+=${OPTARG}}" 3>&- 4>&- ;;
	--key=       | -K* ) eval "${OPTARG%%=*}"='${OPTARG#*=}' ;;
	--non-unique | -o* ) ;;
	--root=      | -R* ) ;;
	--system     | -r* ) NORMAL= SYSTEM=+ ;;
	--version    | -V* ) exec "${0}" --version 3>&- 4>&- ;;
	--dry-run    ) exec 3>&1 4>&1 ;;
	--*          ) OPTIND=1; getopts '' OPT "-${OPT}"; exit 1 ;;
	*            ) exit 1 ;;
	esac
done
shift $(( $OPTIND - 1 ))
GROUP=${1-}
: "${GROUP:?}"

###########################################################################
#
# Values.
#
###########################################################################
# LDAPBINDDN.
case ${LDAPBINDDN++} in '' )
	LDAPBINDDN=$( exec "${wrapper}" --mode=binddn-admin )
	export LDAPBINDDN
	printf '# ,,,[%s],,,\n' "LDAPBINDDN=${LDAPBINDDN}" >&4
esac
echo >&4

# FORCE.
case ${FORCE:++} in
+ ) LDIF=$(
	exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
		-a always \
		-- "(&(objectClass=posixGroup)(cn=${GROUP}))" 1.1
	); case ${LDIF:++} in + ) exit 0 ;; esac
esac
case ${FORCE:++},${GROUP_GID++} in
+,+ ) LDIF=$(
	exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
		-a always \
		-- "(&(objectClass=posixGroup)(gidNumber=${GROUP_GID}))" 1.1
	); case ${LDIF:++} in + ) unset GROUP_GID ;; esac ;;
esac

# GROUP_GID.
GROUP_GID=${GROUP_GID:-$(
	exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
		-a always \
		-o ldif-wrap=no \
		-- "(objectClass=posixGroup)" gidNumber \
	| exec awk \
		-F ': ' \
		-v min="${NORMAL:+${GID_MIN:?}}${SYSTEM:+${SYS_GID_MIN:?}}" \
		-v max="${NORMAL:+${GID_MAX:?}}${SYSTEM:+${SYS_GID_MAX:?}}" '
$1 != "gidNumber" { next }
$2 == min { ++min; while ( used[min] ) delete used[min++] }
min < $2 && $2 <= max { used[$2] = 1 }
END { if ( min <= max ) print min }
'
	)}
: "${GROUP_GID:?}"

# GROUP_DN, GROUP_DN_SPEC.
case ${GROUP} in
*=* ) GROUP_DN=${GROUP} ;;
*   )
	# GROUP_BASE_DN.
	case ${GROUP_BASE_DN++},${GROUP_BASE_RDN++} in
	+,* ) ;;
	*,+ )
		BASE_DN_SPEC=$(
			exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
				-o ldif-wrap=no \
				-s base \
				-- "(objectClass=*)" 1.1
			)
		case ${BASE_DN_SPEC} in
		'dn:: '* ) BASE_DN=$( exec base64 -d ) << __EOT__ ;;
${BASE_DN_SPEC#"dn:: "}
__EOT__
		'dn: '*  ) BASE_DN=${BASE_DN_SPEC#"dn: "} ;;
		*        ) BASE_DN= ;;
		esac
		GROUP_BASE_DN=${GROUP_BASE_RDN},${BASE_DN:?}
		;;
	*,* )
		GROUP_DN_SPEC=$(
			exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
				-a always \
				-o ldif-wrap=no \
				-z 1 \
				-- "(objectClass=posixGroup)" 1.1 \
				2> /dev/null
			) || :
		case ${GROUP_DN_SPEC} in
		'dn:: '* ) GROUP_DN=$( exec base64 -d ) << __EOT__ ;;
${GROUP_DN_SPEC#"dn:: "}
__EOT__
		'dn: '*  ) GROUP_DN=${GROUP_DN_SPEC#"dn: "} ;;
		*        ) GROUP_DN= ;;
		esac
		case ${GROUP_DN:?} in
		*,ou=* ) GROUP_BASE_DN=ou=${GROUP_DN##*,ou=} ;;
		*      ) GROUP_BASE_DN=${GROUP_DN#*,} ;;
		esac
		;;
	esac
	: "${GROUP_BASE_DN:?}"
	# GROUP_RDN.
	case ${GROUP} in
	*[![:alnum:]_\\@.-]* ) GROUP_RDN=cn=$(
		printf '%s' "${GROUP}" \
		| exec od -A n -t x1 \
		| exec tr -d -- '\n' \
		| exec tr -- ' ' '\\'
		) ;;
	* ) GROUP_RDN=cn=${GROUP} ;;
	esac
	# GROUP_DN, GROUP_DN_SPEC.
	unset RDN
	while :
	do
		###########################################################
		#
		# LDIF.
		#
		###########################################################
		DN=${RDN+${RDN},}${GROUP_BASE_DN}
		ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
			-b "${DN}" \
			-s base \
			-- '(objectClass=*)' 1.1 \
			1> /dev/null \
			2>&1 ||
		case ${GROUP_RDN},${GROUP_OU_RDN++},${RDN++} in
		*,*,      | \
		*,+,+     | \
		cn=*-*,,+ )
			case ${DN} in
			*[![:alnum:]_\\@=.,-]* ) DN_SPEC="dn:: $(
				printf '%s' "${DN}" \
				| exec base64 -w 0
				)" ;;
			* ) DN_SPEC="dn: ${DN}" ;;
			esac
			cat << __LDIF__ >&3
${DN_SPEC}
changetype: add
objectClass: organizationalUnit

__LDIF__
			;;
		*,*,*     ) break ;;
		esac
		###########################################################
		#
		# Values.
		#
		###########################################################
		# GROUP_BASE_DN.
		GROUP_BASE_DN=${DN}
		# GROUP_OU_RDN.
		case ${RDN++},${GROUP_OU_RDN-} in
		+,*,* ) GROUP_OU_RDN=${GROUP_OU_RDN%,*} ;;
		+,*   ) break ;;
		esac
		# RDN.
		case ${GROUP_OU_RDN++} in
		+ ) RDN=${GROUP_OU_RDN##*,} ;;
		* ) RDN=ou=${GROUP_RDN#*=}; RDN=${RDN%-*} ;;
		esac
	done
	GROUP_DN=${GROUP_RDN},${GROUP_BASE_DN}
	;;
esac
case ${GROUP_DN} in
*[![:alnum:]_\\@=.,-]* ) GROUP_DN_SPEC="dn:: $(
	printf '%s' "${GROUP_DN}" \
	| exec base64 -w 0
	)" ;;
* ) GROUP_DN_SPEC="dn: ${GROUP_DN}" ;;
esac
: "${GROUP_DN:?}" "${GROUP_DN_SPEC:?}"

###########################################################################
#
# LDIF.
#
###########################################################################
# GROUP.
cat << __LDIF__ >&3
${GROUP_DN_SPEC}
changetype: add
objectClass: posixGroup
gidNumber: ${GROUP_GID}

__LDIF__
