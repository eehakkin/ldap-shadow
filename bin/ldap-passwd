#! /bin/sh -Cefu
###########################################################################
# ldap-passwd 1.0
#
# Copyright (C) 2012 - 2020 Eero Häkkinen <Eero+ldap-shadow@Häkkinen.fi>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################
wrapper=${0%-*}-passwd
case ${1-} in
--help=man        ) exec "${0}" --help=troff | exec man -l -- -; exit ;;
--help=troff      ) exec help2man \
	-L 'C.UTF-8' \
	-N \
	-n 'change the password of an LDAP user account' \
	-s 1 \
	-- "${0}" ;;
--help=* | --help ) exec cat << __USAGE__ ;;
Usage: ${0##*[\\/]} [OPTION]... [USER]

Change the password of an LDAP user account on an LDAP server.

Options:
 -b, --binddn=ROLE            Bind using ROLE role.
 -d, --delete                 Delete the password.
 -e, --expire                 Expire the password.
 -h, --help[=FORMAT]          Show this help message and exit.
 -i, --inactive INACTIVE      Set the inactivity period.
 -x, --maxdays MAX_DAYS       Set the maximum number of days before password
                              change.
 -n, --mindays MIN_DAYS       Set the minimum number of days before password
                              change.
 -q, --quiet                  Be quiet.
 -r, --repository REPOSITORY  (ignored)
 -R, --root CHROOT_DIR        (ignored)
 -s, --service SERVICE        Change password for SERVICE service.
 -V, --version                Show version information and exit.
 -w, --warndays WARN_DAYS     Set the password expiration warning days.
     --dry-run                Dump LDIF and exit.

Operands:
 USER              The username (the user identifier defined by the uid
                   attribute) or the distinguished name (DN) of the LDAP user
                   account whose password is to be changed using administrative
                   privileges and either a master password (if USER is
                   the current user and a service password is to be changed) or
                   an administrator password (otherwise).
                   The default is to change the password for the LDAP POSIX
                   user account of the current user using user privileges.

Environment:
 LDAPBINDDN        A distinguished name (DN) to be used for binding to an LDAP
                   server. The default is to search for a distinguished name
                   (DN) based on the current real username.
 LDAPBINDPW        A password for the distinguished name (DN) to be used for
                   binding to an LDAP server. The default is to prompt for
                   a password.
 LDAPCONF          A system LDAP configuration file.
 LDAPRC            A user LDAP configuration file.
 LDAPURI           An URI of an LDAP server or a list of URIs of LDAP servers.
 LDAPDEFAULT_OPTS  Default options for ldapmodify(1), ldappasswd(1),
                   ldapsearch(1) and ldapwhoami(1).
 LDAPMODIFY_OPTS   Options for ldapmodify(1).
 LDAPPASSWD_OPTS   Options for ldappasswd(1).
 LDAPSEARCH_OPTS   Options for ldapsearch(1).
 LDAPWHOAMI_OPTS   Options for ldapwhoami(1).
 LOGNAME           A username.
 SUDO_USER         A real username.
 USER              A fallback username.

Files:
 /etc/ldap/ldap.conf  LDAP configuration. See also ldap.conf(5).

__USAGE__
--mode=askpass )
	shift
	case ${#} in
	0 )
		###########################################################
		#
		# Generate a default prompt.
		#
		###########################################################
		case ${USER_DN++},${USER_DN-} in
		+,"${LDAPBINDDN}"   ) set -- 'Enter LDAP Password: ' ;;
		+,*,"${LDAPBINDDN}" ) set -- 'Enter LDAP Master Password: ' ;;
		*,*                 ) set -- \
			'Enter LDAP Administrator Password: ' ;;
		esac
		;;
	esac
	###################################################################
	#
	# Prompt for a password.
	#
	###################################################################
	set +e
	error=0
	if [ -t 0 ]
	then
		printf '%s' "${*}" >&2
		stty -echo
	fi
	sed -e '/^$/d' -e 'q' | grep -Fvx -e '' || error=${?}
	if [ -t 0 ]
	then
		stty echo
		echo >&2
	fi
	exit "${error}"
	;;
--mode=binddn-admin )
	# Search options.
	export LDAPDEFAULT_OPTS LDAPSEARCH_OPTS
	LDAPSEARCH_OPTS=${LDAPSEARCH_OPTS-${LDAPDEFAULT_OPTS=$(
		exec "${wrapper}" --mode=opts
		)}}
	export LOGNAME
	LOGNAME=${LOGNAME-${USER-$( exec id -un )}}
	DN_SPEC=$(
		printf '%s\n' \
			"&(uid=${SUDO_USER-${LOGNAME}})(|(ou:dn:=Admin)(ou:dn:=Administrator)(ou:dn:=Administrators)(ou:dn:=Admins))" \
			'cn=admin' \
			"uid=${SUDO_USER-${LOGNAME}}" \
		| exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
			-f - \
			-o ldif-wrap=no \
			-z 1 \
			-- '(&(%s)(|(objectClass=posixAccount)(objectClass=simpleSecurityObject)))' 1.1 \
			2> /dev/null \
		| exec sed -e '/^dn:/!d' -e 'q'
		)
	case ${DN_SPEC} in
	'dn:: '* ) echo "${DN_SPEC#"dn:: "}" | base64 -d && echo ;;
	'dn: '*  ) printf '%s\n' "${DN_SPEC#"dn: "}" ;;
	*        ) printf '%s\n' "${USER_DN:?}" ;;
	esac
	exit
	;;
--mode=binddn-master )
	# Search options.
	export LDAPDEFAULT_OPTS LDAPSEARCH_OPTS
	LDAPSEARCH_OPTS=${LDAPSEARCH_OPTS-${LDAPDEFAULT_OPTS=$(
		exec "${wrapper}" --mode=opts
		)}}
	export LOGNAME
	LOGNAME=${LOGNAME-${USER-$( exec id -un )}}
	USER_DN=${USER_DN-$(
		unset USER_SERVICE &&
		exec "${wrapper}" --mode=user-dn
		)}
	case ${USER_DN} in
	*,uid="${LOGNAME}",* )
		# Master user DN.
		printf '%s\n' "uid=${LOGNAME},${USER_DN#*,uid="${LOGNAME}",}"
		;;
	* )
		# Administrator user DN.
		exec "${wrapper}" --mode=binddn-admin
		;;
	esac
	exit
	;;
--mode=binddn-user )
	exec "${wrapper}" --mode=user-dn
	;;
--mode=frontend )
	shift
	case ${2-} in --version )
		base=$( exec basename -- "${0}" )
		script=$( which -- "${1}" || exec ls -d -- "${1}" )
		exec sed \
			-n \
			-e '/^[^#]/q' \
			-e "s/^# ldap-/# ${base%-*}-/" \
			-e 's/^#\( \(.*\)\)*$/\2/p' \
			-- "${script}"
	esac
	###################################################################
	#
	# Modify LDAP entries.
	#
	###################################################################
	# Search options.
	export LDAPDEFAULT_OPTS LDAPSEARCH_OPTS
	LDAPSEARCH_OPTS=${LDAPSEARCH_OPTS-${LDAPDEFAULT_OPTS=$(
		exec "${wrapper}" --mode=opts
		)}}
	# Defaults.
	case ${1} in *add | *sh )
		names=$(
			set \
			| exec sed -n \
				-e '/^[[:upper:]_]*=/!d'	\
				-e 's/=.*$//'			\
				-e '/^BASE_/p'			\
				-e '/^[GU]ID_/p'		\
				-e '/^GROUP_/p'			\
				-e '/^SYS_[GU]ID_/p'		\
				-e '/^USER_/p'			\
				-e '/^USERGROUPS_/p'
			)
		unset names ${names}
		me=$( which -- "${0}" || exec ls -d -- "${0}" )
		base=$( exec basename -- "${me}" )
		dir=$( exec dirname -- "${me}" )
		for dir in /etc "${dir}/../etc"
		do
			file=${dir}/${base%-*}-login.defs
			[ -r "${file}" ] || continue
			while read -r name value
			do
				case ${name} in
				BASE_*       | \
				[GU]ID_*     | \
				GROUP_*      | \
				SYS_[GU]ID_* | \
				USER_*       | \
				USERGROUPS_* ) export "${name}=${value}" ;;
				esac
			done < "${file}"
		done
	esac
	exec 5<&0 6>&1
	unset GROUP_DN GROUP_DN_SPEC GROUP_GID
	unset USER_DN USER_DN_SPEC USER_SERVICE USER_UID
	backend_error=$(
		set -e
		exec 7>&1
		{
			{
				exec 3>&1 0<&5 1>&6 5<&- 6>&- 7>&-
				LDAP_HAS_FRONTEND=+ exec "${@}"
			} &
			exec 0<&- 1>&- 5<&- 6>&-
			wait "${!}" && echo '0' >&7 || echo "${?}" >&7
		} | {
			exec 3<&0 0<&5 1>&6 5<&- 6>&- 7>&-
			while :
			do
				IFS= read -r line <&3 || exit 0
				case ${line} in
				'' ) break ;;
				esac
				while :
				do
					case ${line} in
					'# ,,,[LDAPBINDDN='*'],,,' | \
					'# ,,,[USER_DN='*'],,,'    )
						name_and_value=${line#"# ,,,["}
						name_and_value=${name_and_value%"],,,"}
						export "${name_and_value}"
						continue 2
						;;
					'# ,,,['*=* )
						if IFS= read -r line2 <&3
						then
							line=${line}${IFS#??}${line2}
							continue
						fi
						;;
					esac
					printf 'error: %s\n' "${line}" >&2
					exit 1
				done
			done
			# Modify options.
			export LDAPDEFAULT_OPTS LDAPMODIFY_OPTS
			opts=${LDAPMODIFY_OPTS-${LDAPDEFAULT_OPTS=$(
				exec "${wrapper}" --mode=opts
				)}}
			LDAPBINDPW=$(
				exec "${wrapper}" --mode=getpass-simple-modify
				)
			case ${LDAPBINDPW:++},${opts} in
			,*  | *,*' -y /dev/fd/4' ) LDAPMODIFY_OPTS=${opts} ;;
			+,* ) LDAPMODIFY_OPTS="${opts} -y /dev/fd/4" ;;
			esac
			# Whoami options.
			export LDAPDEFAULT_OPTS LDAPWHOAMI_OPTS
			opts=${LDAPWHOAMI_OPTS-${LDAPDEFAULT_OPTS=$(
				exec "${wrapper}" --mode=opts
				)}}
			case ${LDAPBINDPW:++},${opts} in
			,*  | *,*' -y /dev/fd/4' ) LDAPWHOAMI_OPTS=${opts} ;;
			+,* ) LDAPWHOAMI_OPTS="${opts} -y /dev/fd/4" ;;
			esac
			# Master LDAP URI.
			export LDAPURI
			LDAPURI=$(
				{ exec tr -d -- '\n' <&4 \
				| exec "${wrapper}" \
					--mode=uri-master \
					4<&0 0<&5 5<&-; } \
					4<< __PASS__ 5<&0
${LDAPBINDPW}
__PASS__
				)
			# Modify LDAP entries.
			{ exec tr -d -- '\n' <&4 \
			| exec ldapmodify -M ${LDAPMODIFY_OPTS} \
				-f /dev/fd/3 \
				4<&0 0<&5 5<&-; } \
				4<< __PASS__ 5<&0 &&
${LDAPBINDPW}
__PASS__
			modify_error=0 || modify_error=${?}
			case ${1##*[\\/]} in *group* | *user* )
				# Invalidate name service caches.
				if nscd=$( exec which -- 'nscd' )
				then
					"${nscd}" -i 'group'  &&
					"${nscd}" -i 'passwd' || :
				fi
			esac
			exit "${modify_error}"
		}
		)
	exit "${backend_error:-1}"
	;;
--mode=getpass-simple-modify | \
--mode=getpass-simple-passwd | \
--mode=getpass-simple-whoami )
	# Options.
	unset OPTS
	case ${1##*-} in
	modify ) export PATH ${LDAPMODIFY_OPTS+ OPTS="${LDAPMODIFY_OPTS}" } ;;
	passwd ) export PATH ${LDAPPASSWD_OPTS+ OPTS="${LDAPPASSWD_OPTS}" } ;;
	whoami ) export PATH ${LDAPWHOAMI_OPTS+ OPTS="${LDAPWHOAMI_OPTS}" } ;;
	esac
	opts=${OPTS-${LDAPDEFAULT_OPTS=$(
		exec "${wrapper}" --mode=opts
		)}}
	# Parse simple authentication options.
	unset W x y
	while getopts :E:e:O:o:P:p:Wxy:Z OPT ${opts}
	do
		case ${OPT} in
		W   ) W=+ ;;
		x   ) x=+ ;;
		y   ) y=${OPTARG} ;;
		[?] ) exit 0 ;; # No simple authentication.
		esac
	done
	case ${x+-x} in
	'' ) exit 0 ;; # No simple authentication.
	esac
	case ${y+-${y}} in
	-y/dev/fd/* ) exec cat -- "${y}" ;; # Password file descriptor.
	-y* ) exit 0 ;; # Reusable password file.
	esac
	case ${W+-W},${OPTS++} in
	,+ ) exit ;; # No password options in non-default options.
	esac
	case ${LDAPBINDPW++} in
	+ ) exec tr -d -- '\n' << __PASS__ ;; # Password environment variable.
${LDAPBINDPW}
__PASS__
	esac
	exec "${wrapper}" --mode=askpass # Password prompt.
	;;
--mode=group-dn      | \
--mode=group-dn-spec | \
--mode=user-dn       | \
--mode=user-dn-spec  )
	# Search options.
	export LDAPDEFAULT_OPTS LDAPSEARCH_OPTS
	LDAPSEARCH_OPTS=${LDAPSEARCH_OPTS-${LDAPDEFAULT_OPTS=$(
		exec "${wrapper}" --mode=opts
		)}}
	case ${1#--mode=} in
	*-dn-spec ) unset GROUP_DN_SPEC USER_DN_SPEC ;;
	esac
	unset DN DN_SPEC
	case ${1#--mode=} in
	group-dn      | \
	group-dn-spec )
		case ${GROUP_DN_SPEC++} in
		+ )
			DN_SPEC=${GROUP_DN_SPEC:?}
			;;
		* )
			GROUP=${GROUP-$( exec id -gn )}
			case ${GROUP:?} in
			*=* )
				DN_SPEC=$(
					exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
						-b "${GROUP}" \
						-o ldif-wrap=no \
						-s base \
						-- '(objectClass=posixGroup)' 1.1 \
					| exec sed -e '/^dn:/!d' -e 'q'
					)
				DN=${DN_SPEC:+${GROUP:?}}
				;;
			* )
				DN_SPEC=$(
					exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
						-o ldif-wrap=no \
						-z 1 \
						-- "(&(objectClass=posixGroup)(cn=${GROUP}))" 1.1 \
					| exec sed -e '/^dn:/!d' -e 'q'
					)
				;;
			esac
			;;
		esac
		;;
	user-dn      | \
	user-dn-spec )
		case ${USER_DN_SPEC++} in
		+ )
			DN_SPEC=${USER_DN_SPEC}
			;;
		* )
			LOGNAME=${LOGNAME-${USER-$( exec id -un )}}
			USER=${USER-${LOGNAME-${USER-$( exec id -un )}}}
			case ${USER:?} in
			*=* )
				DN_SPEC=$(
					exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
						-b "${USER}" \
						-o ldif-wrap=no \
						-s base \
						-- '(|(objectClass=inetOrgPerson)(objectClass=organizationalRole)(objectClass=posixAccount))' 1.1 \
					| exec sed -e '/^dn:/!d' -e 'q'
					)
				DN=${DN_SPEC:+${USER:?}}
				;;
			* )
				DN_SPEC=$(
					exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
						-o ldif-wrap=no \
						-z 1 \
						-- "(&(objectClass=posixAccount)(uid=${USER}))" 1.1 \
					| exec sed -e '/^dn:/!d' -e 'q'
					)
				case ${USER_SERVICE++} in
				+ )
					case ${DN_SPEC:?} in
					'dn:: '* ) DN=$(
						echo "${DN_SPEC#"dn:: "}" \
						| exec base64 -d
						) ;;
					'dn: '*  ) DN=${DN_SPEC#"dn: "} ;;
					esac
					;;
				esac
				;;
			esac
			case ${USER_SERVICE++},${USER_SERVICE-} in
			+,[Mm]aster )
				case ${DN:?} in
				*,uid="${LOGNAME}",* )
					# Master user DN.
					DN=uid=${LOGNAME},${DN#*,uid="${LOGNAME}",}
					DN_SPEC=$(
						exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
							-b "${DN:?}" \
							-o ldif-wrap=no \
							-s base \
							-- 1.1 \
							2> /dev/null \
						| exec sed -e '/^dn:/!d' -e 'q'
						)
					;;
				esac
				;;
			+,* )
				unset DN_SPEC
				case ${DN:?} in
				*,uid="${LOGNAME}",* )
					# Master user DN.
					DN=uid=${LOGNAME},${DN#*,uid="${LOGNAME}",}
					;;
				esac
				case ${USER_SERVICE} in
				*=* )
					DN=${USER_SERVICE},${DN:?}
					DN_SPEC=$(
						exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
							-b "${DN:?}" \
							-o ldif-wrap=no \
							-s base \
							-- "(&(objectClass=organizationalRole)(roleOccupant=${DN:?}))" 1.1 \
							2> /dev/null \
						| exec sed -e '/^dn:/!d' -e 'q'
						)
					;;
				*-* )
					DN_SPEC=$(
						exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
							-o ldif-wrap=no \
							-z 1 \
							-- "(&(objectClass=organizationalRole)(|(dc:dn:=${USER_SERVICE})(dc:dn:=${USER_SERVICE}s)(ou:dn:=${USER_SERVICE})(ou:dn:=${USER_SERVICE}s)(&(|(dc:dn:=${USER_SERVICE%%-*})(dc:dn:=${USER_SERVICE%%-*}s)(ou:dn:=${USER_SERVICE%%-*})(ou:dn:=${USER_SERVICE%%-*}s))(|(dc:dn:=${USER_SERVICE#*-})(dc:dn:=${USER_SERVICE#*-}s)(ou:dn:=${USER_SERVICE#*-})(ou:dn:=${USER_SERVICE#*-}s))))(roleOccupant=${DN:?}))" 1.1 \
							2> /dev/null \
						| exec sed -e '/^dn:/!d' -e 'q'
						)
					unset DN
					;;
				* )
					DN_SPEC=$(
						exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
							-o ldif-wrap=no \
							-z 1 \
							-- "(&(objectClass=organizationalRole)(|(dc:dn:=${USER_SERVICE})(dc:dn:=${USER_SERVICE}s)(ou:dn:=${USER_SERVICE})(ou:dn:=${USER_SERVICE}s))(roleOccupant=${DN:?}))" 1.1 \
							2> /dev/null \
						| exec sed -e '/^dn:/!d' -e 'q'
						)
					unset DN
					;;
				esac
				;;
			esac
			;;
		esac
		;;
	esac
	case ${1#--mode=} in
	*-dn )
		case ${DN++} in
		'' )
			case ${DN_SPEC} in
			'dn:: '* ) DN=$(
				echo "${DN_SPEC#"dn:: "}" \
				| exec base64 -d
				) ;;
			'dn: '*  ) DN=${DN_SPEC#"dn: "} ;;
			esac
			;;
		esac
		printf '%s\n' "${DN:?}"
		;;
	*-dn-spec )
		printf '%s\n' "${DN_SPEC:?}"
		;;
	esac
	exit
	;;
--mode=ldap-conf )
	shift
	case ${#} in
	0 ) set -- cat ;;
	esac
	{
		case ${LDAPNOINIT++} in
		+ ) exit ;;
		esac
		set --
		for rc in \
			/etc/ldap/ldap.conf		\
			~/ldaprc ~/.ldaprc ldaprc	\
			${LDAPCONF+ "${LDAPCONF}" }	\
			${LDAPRC+ ~/"${LDAPRC}" ~/".${LDAPRC}" "${LDAPRC}" }
		do
			[ ! -s "${rc}" ] || set -- "${@}" "${rc}"
		done
		exec awk -v OFS='\t' -- '
# Ignore comments and empty lines.
! /^[^#]/ { next }
# Ignore user only options in system configuration files.
( \
	FILENAME == "/etc/ldap/ldap.conf" ||	\
	FILENAME == ENVIRON["LDAPCONF"]		\
) && $1 ~ /^(BINDDN|SASL_AUTH[CZ]ID|TLS_(CERT|KEY))$/ { next }
# Record options in configuration files
match( $0, /[\t ]+/ ) { conf[$1] = substr( $0, RSTART + RLENGTH ) }
END {
	# Record options in environment variables.
	for ( i in ENVIRON ) {
		if ( ( i ~ /^LDAP./ ) && ( i !~ /^LDAP(CONF|RC)$/ ) )
			conf[substr( i, 5 )] = ENVIRON[i]
	}
	# Print options.
	for ( i in conf )
		print i, conf[i]
}' "${@}"
	} | exec "${@}"
	exit
	;;
--mode=opts )
	exec "${wrapper}" --mode=ldap-conf sed -e '/^SASL_/!d' | {
		# Prepare to try
		# simple bind without or with a password and
		# SASL bind with EXTERNAL or any SASL method.
		set -- '-x' '-Y EXTERNAL' '-W -x' ''
		while read -r name value
		do
			# There are SASL options thus prepare to try
			# SASL bind with EXTERNAL or any SASL method.
			set -- '-Y EXTERNAL' ''
			case ${name} in
			SASL_METHOD )
				# There is a SASL method option thus
				# use SASL bind with a specific SASL method.
				case ${value} in
				EXTERNAL ) set -- '-Y EXTERNAL' ;;
				* ) set -- '' ;;
				esac
				break
				;;
			esac
		done
		while :
		do
			LDAPSEARCH_OPTS=${1}
			shift
			# Try the preferred search options
			# if there are multiple sets of search options.
			case ${#} in
			0 ) ;;
			* ) (
				# Hide errors in the case of non-interactive bind.
				case ${LDAPSEARCH_OPTS} in
				'-x' | '-Y EXTERNAL' ) exec 2> /dev/null ;;
				esac &&
				exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
					-s base \
					-- 1.1 \
					> /dev/null
				) || continue ;;
			esac
			break
		done
		printf '%s\n' "${LDAPSEARCH_OPTS}"
	}
	exit
	;;
--mode=uri-master )
	# Search options.
	export LDAPDEFAULT_OPTS LDAPSEARCH_OPTS
	LDAPSEARCH_OPTS=${LDAPSEARCH_OPTS-${LDAPDEFAULT_OPTS=$(
		exec "${wrapper}" --mode=opts
		)}}
	# Determine the search base.
	case ${LDAPBASE++} in '' )
		BASE_DN_SPEC=$(
			exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
				-o ldif-wrap=no \
				-s base \
				-- 1.1 \
			| exec sed -e '/^dn:/!d' -e 'q'
			)
		case ${BASE_DN_SPEC} in
		'dn:: '* ) LDAPBASE=$(
			echo "${BASE_DN_SPEC#"dn:: "}" \
			| exec base64 -d
			) ;;
		* ) LDAPBASE=${BASE_DN_SPEC#"dn: "} ;;
		esac
		: "${LDAPBASE:?}"
	esac
	# Determine the URIs of the master LDAP servers.
	master_uri=$(
		printf '%s\n' \
			"${LDAPBASE}"		\
			"${LDAPBASE#*,}"	\
			"${LDAPBASE#*,*,}"	\
		| exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
			-b cn=config \
			-f - \
			-o ldif-wrap=no \
			-- "(&(objectClass=olcDatabaseConfig)(olcSuffix=%s)(olcUpdateRef=*))" olcUpdateRef \
			2> /dev/null \
		| exec sed \
			-n \
			-e '/^dn:/,/^$/!d' \
			-e 's/^olcUpdateRef: *//p' \
			-e '/^$/q'
		)
	case ${master_uri:++} in
	+ ) printf '%s\n' "${master_uri}"; exit ;;
	esac
	# Determine the URIs of all the candidate LDAP servers.
	LDAPURI=${LDAPURI-$(
		exec "${wrapper}" --mode=ldap-conf sed \
			-n \
			-e 's/^URI[[:space:]][[:space:]]*//p'
		)}
	set -- ${LDAPURI:?}
	case ${#} in 0 | 1 )
		LDAPURI=${1-}
		printf '%s\n' "${LDAPURI:?}"
		exit
	esac
	# Whoami options.
	export LDAPDEFAULT_OPTS LDAPWHOAMI_OPTS
	opts=${LDAPWHOAMI_OPTS-${LDAPDEFAULT_OPTS=$(
		exec "${wrapper}" --mode=opts
		)}}
	LDAPBINDPW=$( exec "${wrapper}" --mode=getpass-simple-whoami )
	case ${LDAPBINDPW:++},${opts} in
	,*  | *,*' -y /dev/fd/4' ) LDAPWHOAMI_OPTS=${opts} ;;
	+,* ) LDAPWHOAMI_OPTS="${opts} -y /dev/fd/4" ;;
	esac
	# Loop over the candidate LDAP servers in order to handle partial
	# replication (userPassword attributes are not always replicated).
	for uri
	do
		# Passwords must never be passed as command-line arguments
		# (using the -w option or such) due to security and privacy
		# reasons thus use a here-document.
		{ exec tr -d -- '\n' <&4 \
		| exec ldapwhoami ${LDAPWHOAMI_OPTS} \
			-H "${uri}" \
			4<&0 0<&5 1> /dev/null 5<&-; } \
			4<< __PASS__ 5<&0 &&
${LDAPBINDPW}
__PASS__
		{ printf '%s\n' "${uri}" && exit; } || error=${?}
	done
	exit "${error}"
	;;
--version ) unset LDAP_HAS_FRONTEND ;;
esac
${LDAP_HAS_FRONTEND:+:} exec "${wrapper}" --mode=frontend "${0}" "${@}"

###########################################################################
#
# Defaults.
#
###########################################################################
export LOGNAME USER USER_DN USER_DN_SPEC USER_SERVICE
LOGNAME=${LOGNAME-${USER-$( exec id -un )}}
DELETE= EXPIRE= QUIET=
unset BINDDN_ROLE
unset USER_INACTIVE USER_MAX_DAYS USER_MIN_DAYS USER_WARN_DAYS

###########################################################################
#
# Options.
#
###########################################################################
while getopts b:dehi:n:qR:r:s:Vw:x:-: OPT "${@}"
do
	case -${OPT}${OPTARG-} in
	--binddn     | \
	--inactive   | \
	--maxdays    | \
	--mindays    | \
	--repository | \
	--root       | \
	--service    | \
	--warndays   )
		OPT=${OPT}${OPTARG}
		eval 'OPTARG=${'"${OPTIND}"'?}'
		OPTIND=$(( ${OPTIND} + 1 ))
		;;
	--*=* ) OPT=${OPT}${OPTARG%%=*} OPTARG=${OPTARG#*=} ;;
	--*   ) OPT=${OPT}${OPTARG%%=*}; unset OPTARG ;;
	esac
	case -${OPT}${OPTARG+=} in
	--binddn=     | -b* ) BINDDN_ROLE=${OPTARG} ;;
	--delete      | -d* ) DELETE=+ ;;
	--expire      | -e* ) EXPIRE=+ ;;
	--help        | -h* | \
	--help=       ) exec "${0}" --help"${OPTARG+=${OPTARG}}" 3>&- ;;
	--inactive=   | -i* ) USER_INACTIVE=${OPTARG} ;;
	--maxdays=    | -x* ) USER_MAX_DAYS=${OPTARG} ;;
	--mindays=    | -n* ) USER_MIN_DAYS=${OPTARG} ;;
	--quiet       | -q* ) QUIET=+ ;;
	--repository= | -r* ) ;;
	--root=       | -R* ) ;;
	--service=    | -s* ) USER_SERVICE=${OPTARG} ;;
	--version     | -V* ) exec "${0}" --version 3>&- ;;
	--warndays=   | -w* ) USER_WARN_DAYS=${OPTARG} ;;
	--dry-run     ) exec 3>&1 ;;
	--*           ) OPTIND=1; getopts '' OPT "-${OPT}"; exit 1 ;;
	*             ) exit 1 ;;
	esac
done
shift $(( $OPTIND - 1 ))
USER=${1-${LOGNAME}}
USER_DN_SPEC=$( exec "${wrapper}" --mode=user-dn-spec )
USER_DN=$( exec "${wrapper}" --mode=user-dn )

###########################################################################
#
# Values.
#
###########################################################################
case ${DELETE:++}${EXPIRE:++}${USER_INACTIVE++}${USER_MAX_DAYS++}${USER_MIN_DAYS++}${USER_WARN_DAYS++} in
+* )
	###################################################################
	#
	# LDIF.
	#
	###################################################################
	# LDAPBINDDN.
	case ${LDAPBINDDN++} in '' )
		LDAPBINDDN=$( exec "${wrapper}" --mode=binddn-admin )
		export LDAPBINDDN
		printf '# ,,,[%s],,,\n' "LDAPBINDDN=${LDAPBINDDN}" >&3
	esac
	echo >&3

	case ${EXPIRE:++} in
	+ )
		PPOLICY=$(
			exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
				-b "${USER_DN}" \
				-s base \
				-- '(|(pwdChangedTime=*)(pwdPolicySubentry=*))' 1.1
			)
		case ${PPOLICY:++} in
		+ ) EXPIRE="\
replace: pwdReset
pwdReset: TRUE" ;;
		* ) EXPIRE="\
replace: shadowLastChange
shadowLastChange: 0" ;;
		esac
		;;
	esac
	cat << __LDIF__ >&3
${USER_DN_SPEC}
changetype: modify${USER_INACTIVE+
replace: shadowInactive${USER_INACTIVE:+
shadowInactive: ${USER_INACTIVE}}
-}${USER_MAX_DAYS+
replace: shadowMax${USER_MAX_DAYS:+
shadowMax: ${USER_MAX_DAYS}}
-}${USER_MIN_DAYS+
replace: shadowMin${USER_MIN_DAYS:+
shadowMin: ${USER_MIN_DAYS}}
-}${USER_WARN_DAYS+
replace: shadowWarning${USER_WARN_DAYS:+
shadowWarning: ${USER_WARN_DAYS}}
-}${DELETE:+
replace: userPassword
-}${EXPIRE:+
${EXPIRE}
-}

__LDIF__
	;;
* )
	###################################################################
	#
	# Password change.
	#
	###################################################################
	exec 3>&-
	# LDAPBINDDN.
	case ${LDAPBINDDN++} in '' )
		MASTER=${1+master}
		LDAPBINDDN=$(
			exec "${wrapper}" \
				--mode="binddn-${BINDDN_ROLE-${MASTER:-user}}"
			)
		export LDAPBINDDN
	esac
	# Password options.
	export LDAPDEFAULT_OPTS LDAPPASSWD_OPTS
	opts=${LDAPPASSWD_OPTS-${LDAPDEFAULT_OPTS=$(
		exec "${wrapper}" --mode=opts
		)}}
	LDAPBINDPW=$( exec "${wrapper}" --mode=getpass-simple-passwd )
	case ${LDAPBINDPW:++},${opts} in
	,*  | *,*' -y /dev/fd/4' ) LDAPPASSWD_OPTS=${opts} ;;
	+,* ) LDAPPASSWD_OPTS="${opts} -y /dev/fd/4" ;;
	esac
	# Whoami options.
	export LDAPDEFAULT_OPTS LDAPWHOAMI_OPTS
	opts=${LDAPWHOAMI_OPTS-${LDAPDEFAULT_OPTS=$(
		exec "${wrapper}" --mode=opts
		)}}
	case ${LDAPBINDPW:++},${opts} in
	,*  | *,*' -y /dev/fd/4' ) LDAPWHOAMI_OPTS=${opts} ;;
	+,* ) LDAPWHOAMI_OPTS="${opts} -y /dev/fd/4" ;;
	esac
	# Master LDAP URI.
	export LDAPURI
	LDAPURI=$(
		{ exec tr -d -- '\n' <&4 \
		| exec "${wrapper}" \
			--mode=uri-master \
			4<&0 0<&5 5<&-; } \
			4<< __PASS__ 5<&0
${LDAPBINDPW}
__PASS__
		)

	###################################################################
	#
	# Password quality check configuration.
	#
	###################################################################
	config=/etc/passwdqc.conf
	for config in "${config%.conf}-ldap.conf" "${config}"
	do
		for config in "${config%.conf}-site.conf" "${config}"
		do
			[ -f "${config}" ] && break 2
		done
	done
	retry=3
	if [ -f "${config}" ]
	then
		min=disabled,24,11,8,7 max=40 passphrase=3 random=47
		read_config() {
			while read -r line
			do
				case ${line} in
				config=*     )
					read_config < "${line#*=}"
					;;
				max=*        | \
				min=*        | \
				passphrase=* | \
				random=*     | \
				retry=*      )
					eval "${line%%=*}"='${line#*=}'
					;;
				esac
			done
		}
		read_config < "${config}"
		# Split ${min}.
		IFS=,; set -- ${min}; unset IFS
		# Apply password policy if applicable.
		PWD_POLICY_DN_SPEC=$(
			exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
				-b "${USER_DN}" \
				-o ldif-wrap=no \
				-s base \
				-- '(objectClass=*)' pwdPolicySubentry \
			| exec sed -e '/^pwdPolicySubentry: */!d' -e 'q'
			)
		case ${PWD_POLICY_DN_SPEC} in
		'pwdPolicySubentry:: '* ) PWD_POLICY_DN=$(
			echo "${PWD_POLICY_DN_SPEC#"pwdPolicySubentry:: "}" \
			| exec base64 -d
			) ;;
		* ) PWD_POLICY_DN=${PWD_POLICY_DN_SPEC#"pwdPolicySubentry: "} ;;
		esac
		min=${PWD_POLICY_DN:+$(
			exec ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
				-b "${PWD_POLICY_DN}" \
				-o ldif-wrap=no \
				-s base \
				-- '(objectClass=*)' pwdMinLength \
			| exec sed -e '/^pwdMinLength: */!d' -e 's///' -e 'q'
			)}
		case ${min:++} in + )
			n4=${5:-7}
			case ${n4} in
			disabled ) coefficient=100 ;;
			*        ) coefficient=$(( 100 * ${min} / ${n4} )) ;;
			esac
			for n
			do
				case ${n} in
				disabled ) ;;
				* )
					n=$(( ( ${coefficient} * ${n} + 50 ) / 100 ))
					[ "${n}" -ge "${min}" ] || n=${min}
					;;
				esac
				set -- "${@}" "${n}"
				shift
			done
			passphrase=$(( ( ${coefficient} * ${passphrase} + 50 ) / 100 ))
			[ ${coefficient} -lt 100 ] || random=$(( ( ${coefficient} * ${random%%,*} + 50 ) / 100 ))
		esac
		# Merge ${min}.
		n0=${1:-disabled} n1=${2:-24} n2=${3:-11} n3=${4:-8} n4=${5:-7}
		min=${n0},${n1},${n2},${n3},${n4}
		# Explain password quality checks.
		if [ -t 0 ]
		then
			n() {
				case ${1} in
				1 | 8* | 11 | 18 ) echo 'n' ;;
				esac
			}
			if [ "${passphrase}" -gt 0 ] && [ "${n2}" -le "${max}" ]
			then
				# MESSAGE_INTRO_BOTH
				printf '
You can now choose the new password or passphrase.
' >&2
			else
				# MESSAGE_INTRO_PASSWORD
				printf '
You can now choose the new password.
' >&2
			fi
			if   [ "${n0}" = "${n4}" ]
			then
				# MESSAGE_EXPLAIN_PASSWORD_1CLASS
				printf '
A good password should be a mix of upper and lower case letters,
digits, and other characters.  You can use a%s %d character long
password.
' "$( n "${n4}" )" "${n4}" >&2
			elif [ "${n3}" = "${n4}" ]
			then
				# MESSAGE_EXPLAIN_PASSWORD_CLASSES
				printf '
A valid password should be a mix of upper and lower case letters,
digits, and other characters.  You can use a%s %d character long
password with characters from at least %d of these 4 classes.
An upper case letter that begins the password and a digit that
ends it do not count towards the number of character classes used.
' "$( n "${n4}" )" "${n4}" "$(( ${n1} != ${n3} ? 3 : 2 ))" >&2
			elif [ "${n3}" = 'disabled' ]
			then
				# MESSAGE_EXPLAIN_PASSWORD_ALL_CLASSES
				printf '
A valid password should be a mix of upper and lower case letters,
digits, and other characters.  You can use a%s %d character long
password with characters from all of these classes.  An upper
case letter that begins the password and a digit that ends it do
not count towards the number of character classes used.
' "$( n "${n4}" )" "${n4}" >&2
			else
				# MESSAGE_EXPLAIN_PASSWORD_ALT
				printf '
A valid password should be a mix of upper and lower case letters,
digits, and other characters.  You can use a%s %d character long
password with characters from at least 3 of these 4 classes, or
a%s %d character long password containing characters from all the
classes.  An upper case letter that begins the password and a
digit that ends it do not count towards the number of character
classes used.
' "$( n "${n3}" )" "${n3}" "$( n "${n4}" )" "${n4}" >&2
			fi
			if [ "${passphrase}" -gt 0 ] && [ "${n2}" -le "${max}" ]
			then
				# MESSAGE_EXPLAIN_PASSPHRASE
				printf '
A passphrase should be of at least %d words, %d to %d characters
long, and contain enough different characters.
' "${passphrase}" "${n2}" "${max}" >&2
			fi
			if [ "${random%%,*}" -gt 0 ]
			then
				for random_step in 13 12 1
				do
					[ "$(( ${random%%,*} % ${random_step} ))" -eq 0 ] && break
				done
				while :
				do
					random_pass=
					random_missing=${random%%,*}
					while [ "${random_missing}" -gt 0 ]
					do
						# Prefer passphrases over passwords.
						case ${random_step} in
						12 | 13 )
							random_words=$(( ${random_missing} / ${random_step} ))
							case ${random_step},${random_words} in
							12,[123]  ) ;;
							12,4      ) random_words=2 ;;
							12,*      ) random_words=3 ;;
							13,[1234] ) ;;
							13,5      ) random_words=3 ;;
							13,*      ) random_words=4 ;;
							esac
							random_pass=${random_pass:+${random_pass}-}$(
								exec pwqgen random="$(( ${random_step} * ${random_words} ))"
								)
							random_missing=$(( ${random_missing} - ${random_step} * ${random_words} ))
							;;
						* )
							if [ "${random_missing}" -le 85 ]
							then
								random_bits=${random_missing}
							else
								random_bits=$(( 3 * ( 13 + 4 ) ))
							fi
							random_pass=${random_pass}$(
								exec pwqgen random="${random_bits}"
								)
							random_missing=$(( ${random_missing} - ${random_bits} ))
							;;
						esac
					done
					# Passwords must never be passed as
					# command-line arguments due to
					# security and  privacy reasons thus
					# use a here-document.
					if pwqcheck -2 \
						config="${config}" \
						min="${min}" \
						passphrase="${passphrase}" \
						<< __PASS__ > /dev/null
${random_pass}
${LDAPBINDPW}
__PASS__
					then
						# MESSAGE_RANDOM
						cat << __EOT__ >&2

Alternatively, if no one else can see your terminal now, you can
pick this as your password: "${random_pass}".
__EOT__
						break
					fi
					random=$(( ${random} + ${random_step} ))
				done
			fi
			echo >&2
		fi
	else
		pwqcheck() { :; }
	fi

	###################################################################
	#
	# New LDAP password.
	#
	###################################################################
	while :
	do
		new_pass=$(
			exec "${wrapper}" --mode=askpass \
				'Enter new password: '
			)
		# Passwords must never be passed as command-line arguments
		# due to security and privacy reasons thus use a here-document.
		if error_msg=$(
			pwqcheck -2 \
				config="${config}" \
				min="${min}" \
				passphrase="${passphrase}" \
				<< __PASS__
${new_pass}
${LDAPBINDPW}
__PASS__
			)
		then
			new_pass2=$(
				exec "${wrapper}" --mode=askpass \
					'Re-type new password: '
				)
			# Passwords must never be passed as command-line
			# arguments due to security and privacy reasons
			# thus use the built-in case compound command.
			case ${new_pass2} in "${new_pass}" ) break ;; esac
			error_msg='Sorry, passwords do not match.'
		fi
		printf '%s\n' "${error_msg}" >&2
		retry=$(( ${retry} - 1 ))
		[ "${retry}" -ge 1 ] || exit 1
	done
	unset new_pass2

	###################################################################
	#
	# Change the LDAP password.
	#
	###################################################################
	# Passwords must never be passed as command-line arguments (using
	# the -s and -w options or such) due to security and privacy reasons
	# thus use a here-document.
	{ exec tr -d -- '\n' <&3 \
	| { exec tr -d -- '\n' <&4 \
	| exec ldappasswd ${LDAPPASSWD_OPTS} \
		-T /dev/fd/3 \
		-- "${USER_DN}" \
		4<&0 0<&5 5<&-; } \
		3<&0; } \
		3<< __NEW_PASS__ 4<< __PASS__ 5<&0
${new_pass}
__NEW_PASS__
${LDAPBINDPW}
__PASS__
	${QUIET:+:} printf '%s\n' 'LDAP Password updated successfully.' >&2
	;;
esac
